name: CI/CD Pipeline

on:
  push:
    branches:
      - main # Branche que vous utilisez pour le déploiement

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Archive application files
        run: tar -czf app.tar.gz .

      - name: SSH to EC2 and deploy
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: 13.39.150.26
          username: ec2-user
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            # Stop and remove the existing container if it exists
            docker stop myfastapi || true
            docker rm myfastapi || true

            # Remove the old application files
            rm -rf /home/ec2-user/myfastapiapp

            # Create a new directory and extract the new files
            mkdir -p /home/ec2-user/myfastapiapp
            tar -xzf app.tar.gz -C /home/ec2-user/myfastapiapp

            # Navigate to the application directory
            cd /home/ec2-user/myfastapiapp

            # Build the Docker image
            docker build -t myfastapi:latest .

            # Run the Docker container
            docker run -d --name myfastapi -p 80:80 -e AWS_REGION=${{ secrets.AWS_REGION }} myfastapi:latest

      # - name: Set up Docker Buildx
      #   uses: docker/setup-buildx-action@v2

      # - name: Log in to Docker Hub
      #   run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      # - name: Cache Docker layers
      #   uses: actions/cache@v3
      #   with:
      #     path: /tmp/.buildx-cache
      #     key: ${{ runner.os }}-buildx-${{ github.sha }}
      #     restore-keys: |
      #       ${{ runner.os }}-buildx-

      # - name: Build and push Docker image
      #   run: |
      #     docker-compose build
      #     docker-compose push

      # - name: Prepare env variables
      #   run: |
      #     echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}" > .env
      #     echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> .env
      #     echo "AWS_S3_BUCKET_NAME=${{ secrets.AWS_S3_BUCKET_NAME }}" >> .env
      #     echo "AWS_REGION=${{ secrets.AWS_REGION }}" >> .env

      # - name: Deploy to EC2
      #   env:
      #     SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
      #     HOST: ${{ secrets.HOST }}
      #     USER: ${{ secrets.USER }}
      #     AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      #     AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      #     AWS_S3_BUCKET_NAME: ${{ secrets.AWS_S3_BUCKET_NAME }}
      #     AWS_REGION: ${{ secrets.AWS_REGION }}
      #   run: |
      #     echo "$SSH_PRIVATE_KEY" > id_rsa
      #     chmod 600 id_rsa

      #     scp -i id_rsa -o StrictHostKeyChecking=no .env $USER@$HOST:/home/$USER/myfastapiapp/.env

      #     # Forcer l'arrêt et la suppression des conteneurs existants
      #     ssh -i id_rsa -o StrictHostKeyChecking=no $USER@$HOST << EOF

      #       cd /home/$USER/myfastapiapp

      #       git pull origin main

      #       docker-compose down

      #       # Export environment variables for docker-compose
      #       export AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      #       export AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      #       export AWS_S3_BUCKET_NAME=${AWS_S3_BUCKET_NAME}
      #       export AWS_REGION=${AWS_REGION}

      #       docker-compose pull
      #       docker-compose up -d
      #     EOF
